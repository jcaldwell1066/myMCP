{
  "campaignMeta": {
    "title": "The Digital Lodge Chronicles: From Source to Summit",
    "version": "1.0.0",
    "description": "A comprehensive quest combining myMCP installation mastery with establishing an e-commerce empire for the mystical Cloudpeak Resort Lodge",
    "protagonist": "The Digital Innkeeper",
    "setting": "The Cloud Peaks Digital Wilderness",
    "totalSteps": 6,
    "estimatedDuration": "2-3 hours",
    "difficultyProgression": "easy ‚Üí medium ‚Üí medium ‚Üí hard ‚Üí hard ‚Üí expert",
    "targetAudience": "Developers implementing myMCP from source"
  },
  "referenceNarrative": {
    "primary": "Installing myMCP from GitHub through Redis connection",
    "tangential": "Establishing e-commerce infrastructure for Cloudpeak Resort Lodge",
    "narrative_bridge": "Each technical installation step corresponds to setting up a crucial business system for the resort",
    "setting_details": {
      "lodge_description": "A luxury mountain resort that needs digital transformation",
      "business_challenges": ["Booking system", "Inventory management", "Customer communication", "Payment processing", "Staff coordination", "Analytics dashboard"],
      "technical_metaphors": {
        "github_repo": "Master blueprints from the Digital Architects' Guild",
        "dependencies": "Essential supplies and equipment",
        "build_process": "Constructing the foundation infrastructure",
        "redis_connection": "Establishing the resort's central communication hub",
        "mcp_server": "The concierge system that speaks all languages",
        "integration_testing": "Grand opening dress rehearsal"
      }
    }
  },
  "enhancedQuestSteps": [
    {
      "id": "foundation-blueprints",
      "description": "Acquire the sacred source code from the GitHub repository and prepare the development environment",
      "completed": false,
      "title": "Acquire the Master Lodge Blueprints",
      "metadata": {
        "difficulty": "easy",
        "category": "development",
        "tags": ["git", "github", "repository", "source-control", "environment-setup"],
        "points": 25,
        "estimatedDuration": "15-20 minutes",
        "realWorldSkill": "Git repository cloning and workspace setup",
        "businessMetaphor": "Obtaining architectural plans and permits for the resort"
      },
      "resources": {
        "documentation": [
          {
            "title": "GitHub Repository Guide",
            "url": "https://docs.github.com/en/repositories/creating-and-managing-repositories/cloning-a-repository",
            "type": "external",
            "description": "Official guide for repository cloning"
          },
          {
            "title": "myMCP Project README",
            "type": "file",
            "path": "README.md",
            "description": "Project overview and initial setup instructions"
          }
        ],
        "tools": [
          {
            "name": "Git CLI",
            "command": "git --version",
            "description": "Version control system for code management",
            "platform": "cross-platform",
            "required": true
          },
          {
            "name": "Node.js",
            "command": "node --version",
            "description": "JavaScript runtime environment",
            "platform": "cross-platform",
            "required": true,
            "minimumVersion": "18.0.0"
          }
        ],
        "templates": [
          {
            "name": "Environment Setup Checklist",
            "filename": "setup-checklist.md",
            "content": "# myMCP Installation Checklist\n\n## Prerequisites\n- [ ] Git installed and configured\n- [ ] Node.js 18+ installed\n- [ ] npm 9+ available\n- [ ] Terminal/Command prompt access\n\n## Repository Setup\n- [ ] Repository cloned successfully\n- [ ] Workspace directory created\n- [ ] Initial file structure verified",
            "description": "Systematic checklist for environment preparation"
          }
        ],
        "codeExamples": [
          {
            "title": "Repository Clone Commands",
            "language": "bash",
            "code": "# Clone the repository\ngit clone https://github.com/your-org/myMCP.git\n\n# Navigate to project directory\ncd myMCP\n\n# Verify structure\nls -la\n\n# Check package configuration\ncat package.json | grep name"
          }
        ]
      },
      "execution": {
        "type": "guided",
        "launcher": {
          "type": "checklist",
          "items": [
            "Verify Git is installed and configured with your credentials",
            "Confirm Node.js 18+ and npm 9+ are available in your environment",
            "Clone the myMCP repository from GitHub to your local workspace",
            "Navigate into the project directory and explore the structure",
            "Verify the monorepo packages structure exists (packages/ directory)",
            "Check that key files exist: package.json, tsconfig.json, README.md"
          ],
          "description": "Establish your development foundation by securing the source code"
        },
        "validation": {
          "type": "file-exists",
          "criteria": [
            "Directory 'myMCP' exists in workspace",
            "File 'package.json' contains myMCP project configuration",
            "Directory 'packages/' contains engine, cli, mcpserver subdirectories",
            "Git repository is properly initialized (.git directory exists)",
            "Node.js and npm versions meet minimum requirements"
          ]
        },
        "hints": [
          "Use 'git clone --depth 1' for faster initial clone if you don't need full history",
          "Set up SSH keys for GitHub if you plan to contribute back to the project",
          "Consider using a dedicated workspace directory for the project",
          "Verify your Git configuration with 'git config --list' before cloning"
        ]
      },
      "progress": {
        "attempts": 0,
        "notes": [],
        "artifacts": []
      },
      "narrative": {
        "intro": "The Cloudpeak Resort Lodge sits majestically in the mountains, but its potential remains locked behind outdated systems. As the newly appointed Digital Innkeeper, your first task is to obtain the master blueprints from the renowned Digital Architects' Guild.",
        "completion": "Excellent! You've secured the sacred blueprints and established your development sanctum. The lodge's digital transformation can now begin in earnest.",
        "failure_guidance": "The blueprints remain elusive. Check your connection to the Guild's repositories and ensure your credentials are properly configured."
      }
    },
    {
      "id": "supply-gathering",
      "description": "Install all required dependencies and build the myMCP system from source",
      "completed": false,
      "title": "Gather Essential Lodge Supplies",
      "metadata": {
        "difficulty": "medium",
        "category": "development",
        "tags": ["npm", "dependencies", "build", "typescript", "compilation"],
        "points": 50,
        "estimatedDuration": "20-30 minutes",
        "realWorldSkill": "Package management and TypeScript compilation",
        "businessMetaphor": "Procuring all equipment and materials needed for resort operations"
      },
      "resources": {
        "documentation": [
          {
            "title": "npm Install Documentation",
            "url": "https://docs.npmjs.com/cli/v10/commands/npm-install",
            "type": "external",
            "description": "Official npm installation guide"
          },
          {
            "title": "TypeScript Compilation Guide",
            "url": "https://www.typescriptlang.org/docs/handbook/compiler-options.html",
            "type": "external", 
            "description": "Understanding TypeScript build process"
          },
          {
            "title": "Package.json Reference",
            "type": "file",
            "path": "package.json",
            "description": "Project configuration and script definitions"
          }
        ],
        "tools": [
          {
            "name": "npm",
            "command": "npm --version",
            "description": "Node.js package manager",
            "platform": "cross-platform",
            "required": true
          },
          {
            "name": "TypeScript Compiler",
            "command": "npx tsc --version",
            "description": "TypeScript to JavaScript compiler",
            "platform": "cross-platform",
            "required": true
          }
        ],
        "templates": [
          {
            "name": "Build Verification Script",
            "filename": "verify-build.js",
            "content": "#!/usr/bin/env node\nconst fs = require('fs');\nconst path = require('path');\n\nconst requiredFiles = [\n  'packages/engine/dist/index.js',\n  'packages/cli/dist/index.js',\n  'packages/mcpserver/dist/index.js'\n];\n\nconsole.log('üîç Verifying build artifacts...');\nlet allPresent = true;\n\nfor (const file of requiredFiles) {\n  if (fs.existsSync(file)) {\n    console.log(`‚úÖ ${file}`);\n  } else {\n    console.log(`‚ùå Missing: ${file}`);\n    allPresent = false;\n  }\n}\n\nconsole.log(allPresent ? 'üéâ Build verification passed!' : '‚ö†Ô∏è Build incomplete');",
            "description": "Script to verify successful compilation"
          }
        ],
        "codeExamples": [
          {
            "title": "Installation and Build Commands",
            "language": "bash",
            "code": "# Install root dependencies\nnpm install\n\n# Install workspace dependencies\nnpm run install:all\n\n# Build all TypeScript packages\nnpm run build\n\n# Verify build success\nnode verify-build.js\n\n# Check available scripts\nnpm run"
          }
        ]
      },
      "execution": {
        "type": "guided",
        "launcher": {
          "type": "checklist",
          "items": [
            "Run 'npm install' to install root project dependencies",
            "Execute 'npm run install:all' or equivalent to install workspace dependencies", 
            "Run the build process using 'npm run build' to compile TypeScript",
            "Verify that dist/ directories are created in each package",
            "Check that no critical build errors occurred during compilation",
            "Test that basic scripts are available using 'npm run' command"
          ],
          "description": "Provision your digital lodge with all necessary operational components"
        },
        "validation": {
          "type": "criteria",
          "criteria": [
            "node_modules directory exists and is populated",
            "packages/engine/dist/ contains compiled JavaScript files",
            "packages/cli/dist/ contains executable files",
            "packages/mcpserver/dist/ contains MCP server implementation",
            "No critical compilation errors in build output",
            "Package scripts are callable without errors"
          ]
        },
        "hints": [
          "Use 'npm ci' instead of 'npm install' for faster, reproducible builds in CI environments",
          "If build fails, check TypeScript configuration in tsconfig.json files",
          "Clear node_modules and package-lock.json if experiencing dependency conflicts",
          "Monitor build output for warnings that might indicate potential runtime issues"
        ]
      },
      "progress": {
        "attempts": 0,
        "notes": [],
        "artifacts": []
      },
      "narrative": {
        "intro": "With blueprints in hand, you must now gather the essential supplies for your lodge. Like any grand resort, Cloudpeak requires premium materials - from the finest linens to the most sophisticated kitchen equipment. In the digital realm, these are your dependencies and compiled assets.",
        "completion": "Outstanding! Your supply warehouses are fully stocked and your foundational systems are compiled and ready. The lodge's infrastructure is taking shape beautifully.",
        "failure_guidance": "Some supplies seem to be missing or incompatible. Review your procurement manifest (package.json) and ensure your suppliers (npm registry) are accessible."
      }
    },
    {
      "id": "communication-hub",
      "description": "Establish Redis connection for multiplayer state management and inter-service communication",
      "completed": false,
      "title": "Construct the Lodge Communication Hub",
      "metadata": {
        "difficulty": "medium",
        "category": "devops",
        "tags": ["redis", "database", "connection", "multiplayer", "state-management"],
        "points": 75,
        "estimatedDuration": "25-35 minutes",
        "realWorldSkill": "Redis setup and connection management",
        "businessMetaphor": "Installing the resort's central communication and coordination system"
      },
      "resources": {
        "documentation": [
          {
            "title": "Redis Quick Start Guide",
            "url": "https://redis.io/docs/getting-started/",
            "type": "external",
            "description": "Official Redis installation and setup guide"
          },
          {
            "title": "Redis Cloud Setup",
            "url": "https://redis.com/try-free/",
            "type": "external",
            "description": "Free cloud Redis instance setup"
          },
          {
            "title": "myMCP Multiplayer Setup",
            "type": "file",
            "path": "docs/multiplayer-setup.md",
            "description": "Project-specific Redis integration guide"
          }
        ],
        "tools": [
          {
            "name": "Redis CLI",
            "command": "redis-cli --version",
            "description": "Command-line interface for Redis",
            "platform": "cross-platform",
            "required": true
          },
          {
            "name": "Docker",
            "command": "docker --version",
            "description": "Containerization platform for Redis deployment",
            "platform": "cross-platform",
            "required": false,
            "alternative": "Use Redis Cloud or local installation"
          }
        ],
        "templates": [
          {
            "name": "Redis Configuration Template",
            "filename": ".env.redis",
            "content": "# Redis Configuration for myMCP\n# Choose one of the following options:\n\n# Option 1: Local Redis (Docker)\nREDIS_URL=redis://localhost:6379\n\n# Option 2: Redis Cloud (recommended for production)\n# REDIS_URL=redis://default:your-password@your-host.redis.com:12345\n\n# Option 3: Custom Redis instance\n# REDIS_URL=redis://username:password@host:port\n\n# Multiplayer Configuration\nENGINE_ID=primary\nIS_PRIMARY=true\nPORT=3000",
            "description": "Environment configuration for Redis connection"
          },
          {
            "name": "Redis Health Check Script",
            "filename": "test-redis.js",
            "content": "#!/usr/bin/env node\nconst Redis = require('ioredis');\n\nasync function testRedisConnection() {\n  const redisUrl = process.env.REDIS_URL || 'redis://localhost:6379';\n  console.log(`üîç Testing Redis connection: ${redisUrl}`);\n  \n  try {\n    const redis = new Redis(redisUrl);\n    await redis.ping();\n    console.log('‚úÖ Redis connection successful!');\n    \n    // Test basic operations\n    await redis.set('myMCP:test', 'connection-verified');\n    const value = await redis.get('myMCP:test');\n    console.log(`üìù Test value: ${value}`);\n    \n    await redis.del('myMCP:test');\n    await redis.quit();\n    console.log('üéâ Redis is ready for myMCP!');\n  } catch (error) {\n    console.error('‚ùå Redis connection failed:', error.message);\n    process.exit(1);\n  }\n}\n\ntestRedisConnection();",
            "description": "Script to verify Redis connectivity and basic operations"
          }
        ],
        "codeExamples": [
          {
            "title": "Redis Setup Options",
            "language": "bash",
            "code": "# Option 1: Local Redis with Docker\ndocker run -d -p 6379:6379 --name myMCP-redis redis:7-alpine\n\n# Option 2: Install Redis locally (Ubuntu/Debian)\nsudo apt update\nsudo apt install redis-server\nsudo systemctl start redis-server\n\n# Option 3: macOS with Homebrew\nbrew install redis\nbrew services start redis\n\n# Test connection\nredis-cli ping\n# Should respond: PONG"
          },
          {
            "title": "Environment Configuration",
            "language": "bash",
            "code": "# Copy environment template\ncp .env.redis .env\n\n# Edit with your Redis URL\n# For Docker: REDIS_URL=redis://localhost:6379  \n# For Cloud: REDIS_URL=redis://user:pass@host:port\n\n# Test the connection\nnode test-redis.js\n\n# Start engine with Redis\nREDIS_URL=redis://localhost:6379 npm run dev:engine"
          }
        ]
      },
      "execution": {
        "type": "guided",
        "launcher": {
          "type": "checklist",
          "items": [
            "Choose Redis deployment option: local Docker, cloud service, or native installation",
            "Install and start Redis using your chosen method",
            "Verify Redis is accessible using 'redis-cli ping' command",
            "Configure environment variables with proper REDIS_URL",
            "Run Redis connection test script to verify myMCP integration",
            "Test multiplayer functionality by starting engine with Redis connection"
          ],
          "description": "Establish the central nervous system for your lodge's operations"
        },
        "validation": {
          "type": "test",
          "criteria": [
            "Redis server responds to ping command",
            "myMCP can connect to Redis without authentication errors",
            "Basic Redis operations (set/get/del) work correctly",
            "Environment variables are properly configured",
            "Engine starts without Redis connection errors",
            "Multiplayer state synchronization is functional"
          ]
        },
        "hints": [
          "Redis Cloud offers free tier perfect for development and testing",
          "For production, consider Redis persistence settings and backup strategies",
          "Use Redis CLI 'MONITOR' command to watch real-time operations during testing",
          "Docker Redis containers are ephemeral - data is lost when container stops"
        ]
      },
      "progress": {
        "attempts": 0,
        "notes": [],
        "artifacts": []
      },
      "narrative": {
        "intro": "Every successful resort needs a sophisticated communication hub - a central nerve center that coordinates between the front desk, housekeeping, kitchen, and management. For Cloudpeak Lodge, this means establishing a real-time data synchronization system that keeps all departments in perfect harmony.",
        "completion": "Magnificent! Your communication hub is operational and humming with activity. Staff across all departments can now coordinate seamlessly, and guests will experience the smooth service that only comes from perfect internal communication.",
        "failure_guidance": "The communication systems are experiencing interference. Check your network connections and ensure the hub's power supply (Redis service) is stable and accessible."
      }
    },
    {
      "id": "concierge-system",
      "description": "Configure and deploy the MCP server for cross-platform protocol communication",
      "completed": false,
      "title": "Deploy the Universal Concierge System",
      "metadata": {
        "difficulty": "hard", 
        "category": "devops",
        "tags": ["mcp", "protocol", "server", "integration", "communication"],
        "points": 100,
        "estimatedDuration": "30-45 minutes",
        "realWorldSkill": "MCP protocol implementation and service deployment",
        "businessMetaphor": "Installing an AI-powered concierge that speaks every language and serves all guest needs"
      },
      "resources": {
        "documentation": [
          {
            "title": "MCP Protocol Specification",
            "url": "https://modelcontextprotocol.io/docs/specification",
            "type": "external",
            "description": "Official Model Context Protocol documentation"
          },
          {
            "title": "MCP Server Implementation Guide",
            "type": "file",
            "path": "packages/mcpserver/README.md",
            "description": "myMCP-specific server implementation guide"
          },
          {
            "title": "Claude Desktop MCP Integration",
            "type": "file",
            "path": "tools/config/claude_desktop_config.example.json",
            "description": "Example configuration for Claude Desktop integration"
          }
        ],
        "tools": [
          {
            "name": "MCP Server",
            "command": "node packages/mcpserver/dist/index.js",
            "description": "myMCP protocol server implementation",
            "platform": "cross-platform",
            "required": true
          },
          {
            "name": "stdio Testing",
            "command": "echo '{\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"initialize\",\"params\":{}}' | node packages/mcpserver/dist/index.js",
            "description": "Test MCP protocol communication",
            "platform": "cross-platform",
            "required": false
          }
        ],
        "templates": [
          {
            "name": "MCP Server Configuration",
            "filename": "mcp-config.json",
            "content": "{\n  \"mcpServers\": {\n    \"myMCP\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"./packages/mcpserver/dist/index.js\"\n      ],\n      \"env\": {\n        \"ENGINE_BASE_URL\": \"http://localhost:3000\",\n        \"DEFAULT_PLAYER_ID\": \"claude-player\",\n        \"REDIS_URL\": \"redis://localhost:6379\"\n      }\n    }\n  }\n}",
            "description": "Configuration for MCP client integration"
          },
          {
            "name": "MCP Testing Script",
            "filename": "test-mcp.js",
            "content": "#!/usr/bin/env node\nconst { spawn } = require('child_process');\n\nasync function testMCPServer() {\n  console.log('üöÄ Testing MCP Server Protocol...');\n  \n  const server = spawn('node', ['packages/mcpserver/dist/index.js'], {\n    stdio: ['pipe', 'pipe', 'inherit']\n  });\n  \n  // Test initialize message\n  const initMessage = {\n    jsonrpc: '2.0',\n    id: 1,\n    method: 'initialize',\n    params: {\n      protocolVersion: '2024-11-05',\n      capabilities: {},\n      clientInfo: { name: 'test-client', version: '1.0.0' }\n    }\n  };\n  \n  server.stdin.write(JSON.stringify(initMessage) + '\\n');\n  \n  server.stdout.on('data', (data) => {\n    console.log('üì® Server response:', data.toString());\n  });\n  \n  setTimeout(() => {\n    server.kill();\n    console.log('‚úÖ MCP Server test completed');\n  }, 3000);\n}\n\ntestMCPServer();",
            "description": "Script to test MCP protocol communication"
          }
        ],
        "codeExamples": [
          {
            "title": "MCP Server Startup",
            "language": "bash", 
            "code": "# Start the engine first\nREDIS_URL=redis://localhost:6379 npm run dev:engine\n\n# In another terminal, start MCP server\nENGINE_BASE_URL=http://localhost:3000 \\\nDEFAULT_PLAYER_ID=concierge-test \\\nnode packages/mcpserver/dist/index.js\n\n# Test with stdio communication\necho '{\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"initialize\",\"params\":{}}' | \\\nnode packages/mcpserver/dist/index.js"
          },
          {
            "title": "Integration Testing Commands",
            "language": "bash",
            "code": "# Test engine connectivity\ncurl http://localhost:3000/health\n\n# Test MCP server tools\nnode test-mcp.js\n\n# Validate MCP protocol compliance\nnpx @modelcontextprotocol/inspector packages/mcpserver/dist/index.js\n\n# Test complete integration\nnpm run test:integration"
          }
        ]
      },
      "execution": {
        "type": "hybrid",
        "launcher": {
          "type": "checklist",
          "items": [
            "Ensure myMCP engine is running and accessible on port 3000",
            "Verify Redis connection is established and functional",
            "Start the MCP server with proper environment configuration",
            "Test MCP protocol initialization using stdio communication",
            "Validate server exposes required tools and resources",
            "Configure client applications (Claude Desktop) for MCP integration",
            "Execute end-to-end integration tests to verify full functionality"
          ],
          "description": "Deploy your multilingual concierge system that bridges all communication protocols"
        },
        "validation": {
          "type": "test",
          "criteria": [
            "MCP server starts without errors and listens for stdio communication",
            "Server responds correctly to JSON-RPC initialize messages",
            "Tools list includes quest management and game state operations",
            "Engine API integration works through MCP protocol",
            "Client configuration enables successful MCP communication",
            "End-to-end workflow completes successfully"
          ]
        },
        "hints": [
          "MCP servers communicate via stdio - they don't use HTTP ports",
          "Test with minimal JSON-RPC messages before complex integrations",
          "Claude Desktop config must use absolute paths to the MCP server",
          "Environment variables must be properly set for engine connectivity"
        ]
      },
      "progress": {
        "attempts": 0,
        "notes": [],
        "artifacts": []
      },
      "narrative": {
        "intro": "The Cloudpeak Lodge demands a concierge service unlike any other - one that can communicate with guests in any language, understand any request, and coordinate with every service in the resort. This isn't just multilingual support; it's a universal translator for the digital age.",
        "completion": "Extraordinary! Your Universal Concierge System is now operational. Guests can communicate their needs in any format, through any channel, and receive perfect service. The lodge has achieved a new level of hospitality excellence.",
        "failure_guidance": "The concierge system is having communication difficulties. Verify the protocol interpreters are properly configured and the central coordinator (engine) is responsive."
      }
    },
    {
      "id": "integration-testing",
      "description": "Execute comprehensive system integration tests across all components and interfaces",
      "completed": false,
      "title": "Conduct the Grand Opening Rehearsal",
      "metadata": {
        "difficulty": "hard",
        "category": "testing", 
        "tags": ["integration", "testing", "validation", "e2e", "quality-assurance"],
        "points": 125,
        "estimatedDuration": "35-50 minutes",
        "realWorldSkill": "Comprehensive system testing and validation",
        "businessMetaphor": "Full dress rehearsal of all lodge operations before the grand opening"
      },
      "resources": {
        "documentation": [
          {
            "title": "Integration Testing Guide",
            "type": "file",
            "path": "tests/README.md",
            "description": "Comprehensive testing strategy and execution guide"
          },
          {
            "title": "API Testing Specifications",
            "type": "file", 
            "path": "tests/api/specs/",
            "description": "Detailed API endpoint test specifications"
          }
        ],
        "tools": [
          {
            "name": "Jest Test Runner",
            "command": "npm test",
            "description": "JavaScript testing framework",
            "platform": "cross-platform",
            "required": true
          },
          {
            "name": "API Test Suite",
            "command": "npm run test:api",
            "description": "Comprehensive API integration tests",
            "platform": "cross-platform",
            "required": true
          },
          {
            "name": "Health Check Validator",
            "command": "curl http://localhost:3000/health",
            "description": "Basic connectivity validation",
            "platform": "cross-platform",
            "required": true
          }
        ],
        "templates": [
          {
            "name": "Integration Test Checklist",
            "filename": "integration-checklist.md",
            "content": "# myMCP Integration Test Checklist\n\n## Core Services\n- [ ] Engine API responds to health checks\n- [ ] Redis connection is stable and performant\n- [ ] MCP server handles protocol messages correctly\n\n## Game Functionality\n- [ ] Player state creation and management\n- [ ] Quest system operations (start, progress, complete)\n- [ ] Score and inventory management\n- [ ] Multi-player state synchronization\n\n## Interface Integration\n- [ ] CLI commands execute successfully\n- [ ] MCP protocol communication works end-to-end\n- [ ] Cross-component data consistency\n\n## Performance Validation\n- [ ] Response times within acceptable limits\n- [ ] Memory usage stable under load\n- [ ] Redis operations perform efficiently\n\n## Error Handling\n- [ ] Graceful degradation when services unavailable\n- [ ] Proper error messages and recovery guidance\n- [ ] System stability under failure conditions",
            "description": "Comprehensive validation checklist for system integration"
          },
          {
            "name": "Test Execution Script",
            "filename": "run-integration-tests.js",
            "content": "#!/usr/bin/env node\nconst { exec } = require('child_process');\nconst chalk = require('chalk');\n\nasync function runIntegrationTests() {\n  console.log(chalk.blue('üß™ myMCP Integration Test Suite'));\n  console.log('=' .repeat(50));\n  \n  const tests = [\n    { name: 'Health Checks', command: 'npm run test:health' },\n    { name: 'API Integration', command: 'npm run test:api' },\n    { name: 'MCP Protocol', command: 'npm run test:mcp' },\n    { name: 'Redis Operations', command: 'npm run test:redis' },\n    { name: 'End-to-End Workflows', command: 'npm run test:e2e' }\n  ];\n  \n  let passed = 0;\n  let failed = 0;\n  \n  for (const test of tests) {\n    console.log(chalk.yellow(`\\nüîç Running ${test.name}...`));\n    try {\n      await new Promise((resolve, reject) => {\n        exec(test.command, (error, stdout, stderr) => {\n          if (error) reject(error);\n          else resolve({ stdout, stderr });\n        });\n      });\n      console.log(chalk.green(`‚úÖ ${test.name} passed`));\n      passed++;\n    } catch (error) {\n      console.log(chalk.red(`‚ùå ${test.name} failed: ${error.message}`));\n      failed++;\n    }\n  }\n  \n  console.log(chalk.blue('\\nüìä Test Results Summary'));\n  console.log(`‚úÖ Passed: ${passed}`);\n  console.log(`‚ùå Failed: ${failed}`);\n  console.log(failed === 0 ? chalk.green('üéâ All tests passed!') : chalk.red('‚ö†Ô∏è Some tests failed'));\n}\n\nrunIntegrationTests();",
            "description": "Automated test execution with comprehensive reporting"
          }
        ],
        "codeExamples": [
          {
            "title": "Manual Integration Test Commands",
            "language": "bash",
            "code": "# Start all services first\nnpm run dev:engine &\nENGINE_PID=$!\n\n# Wait for engine startup\nsleep 5\n\n# Run comprehensive test suite\nnpm run test:integration\n\n# Test specific components\nnpm run test:api        # API endpoints\nnpm run test:redis      # Redis operations  \nnpm run test:mcp        # MCP protocol\nnpm run test:cli        # CLI functionality\n\n# Cleanup\nkill $ENGINE_PID"
          },
          {
            "title": "Validation Commands",
            "language": "bash",
            "code": "# Basic connectivity\ncurl -f http://localhost:3000/health || echo \"Engine failed\"\nredis-cli ping || echo \"Redis failed\"\n\n# Game functionality\ncurl -X POST http://localhost:3000/api/actions/test-player \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"type\":\"SET_SCORE\",\"payload\":{\"score\":100}}'\n\n# MCP protocol test\necho '{\"jsonrpc\":\"2.0\",\"method\":\"ping\",\"id\":1}' | \\\n  node packages/mcpserver/dist/index.js\n\n# Full workflow test\nnode run-integration-tests.js"
          }
        ]
      },
      "execution": {
        "type": "automated",
        "launcher": {
          "type": "test-suite",
          "tests": [
            "Health check validation for all services",
            "API endpoint functionality verification",
            "Redis data persistence and synchronization tests",
            "MCP protocol compliance and communication tests",
            "Cross-component integration workflow validation", 
            "Performance and load testing under simulated usage",
            "Error handling and recovery scenario testing"
          ],
          "description": "Execute the complete integration test suite to validate system readiness"
        },
        "validation": {
          "type": "criteria",
          "criteria": [
            "All core services start and respond within timeout limits",
            "API endpoints return correct responses for standard operations",
            "Redis operations complete successfully with proper data persistence",
            "MCP server handles protocol messages according to specification",
            "End-to-end workflows complete without errors",
            "System maintains stability under moderate load conditions",
            "Error conditions are handled gracefully with appropriate messaging"
          ]
        },
        "hints": [
          "Run tests in a clean environment to avoid state pollution from previous runs",
          "Monitor system resources during testing to identify potential bottlenecks",
          "Capture and analyze logs from failed tests for detailed debugging information",
          "Consider running tests multiple times to identify intermittent issues"
        ]
      },
      "progress": {
        "attempts": 0,
        "notes": [],
        "artifacts": []
      },
      "narrative": {
        "intro": "The grand opening of Cloudpeak Lodge approaches, and every system must work in perfect harmony. Like any world-class resort, a comprehensive dress rehearsal is essential - testing every workflow from check-in to checkout, ensuring every department coordinates flawlessly.",
        "completion": "Spectacular! Your lodge is ready for its grand opening. Every system has been tested, every workflow validated, and every integration verified. Cloudpeak Resort Lodge is now prepared to deliver an exceptional experience to its first guests.",
        "failure_guidance": "Some aspects of the rehearsal revealed issues that need attention. Review the test reports carefully, address the identified problems, and run another rehearsal to ensure everything is perfect."
      }
    },
    {
      "id": "production-optimization",
      "description": "Optimize system configuration for production deployment and establish monitoring",
      "completed": false,
      "title": "Achieve Lodge Excellence Certification",
      "metadata": {
        "difficulty": "expert",
        "category": "devops",
        "tags": ["production", "optimization", "monitoring", "performance", "security"],
        "points": 150,
        "estimatedDuration": "45-60 minutes",
        "realWorldSkill": "Production deployment and system optimization",
        "businessMetaphor": "Earning five-star luxury resort certification through operational excellence"
      },
      "resources": {
        "documentation": [
          {
            "title": "Production Deployment Guide",
            "type": "file",
            "path": "docs/deployment/PRODUCTION.md",
            "description": "Comprehensive production setup and optimization guide"
          },
          {
            "title": "Performance Monitoring Setup",
            "type": "file",
            "path": "docs/monitoring/README.md", 
            "description": "System monitoring and alerting configuration"
          },
          {
            "title": "Security Hardening Checklist",
            "type": "file",
            "path": "docs/security/HARDENING.md",
            "description": "Security best practices and hardening procedures"
          }
        ],
        "tools": [
          {
            "name": "PM2 Process Manager",
            "command": "pm2 --version",
            "description": "Production process management and monitoring",
            "platform": "cross-platform",
            "required": true
          },
          {
            "name": "Performance Monitoring",
            "command": "npm run monitor",
            "description": "Real-time system performance monitoring",
            "platform": "cross-platform",
            "required": true
          }
        ],
        "templates": [
          {
            "name": "Production Configuration",
            "filename": "ecosystem.config.js",
            "content": "module.exports = {\n  apps: [\n    {\n      name: 'myMCP-engine',\n      script: 'packages/engine/dist/index.js',\n      instances: 'max',\n      exec_mode: 'cluster',\n      env: {\n        NODE_ENV: 'production',\n        PORT: 3000,\n        REDIS_URL: process.env.REDIS_URL,\n        ENGINE_ID: 'production-primary',\n        IS_PRIMARY: true\n      },\n      error_file: './logs/engine-error.log',\n      out_file: './logs/engine-out.log',\n      log_file: './logs/engine-combined.log',\n      time: true\n    },\n    {\n      name: 'myMCP-mcpserver',\n      script: 'packages/mcpserver/dist/index.js',\n      instances: 1,\n      env: {\n        NODE_ENV: 'production',\n        ENGINE_BASE_URL: 'http://localhost:3000',\n        DEFAULT_PLAYER_ID: 'production-player'\n      },\n      error_file: './logs/mcp-error.log',\n      out_file: './logs/mcp-out.log',\n      time: true\n    }\n  ]\n};",
            "description": "PM2 ecosystem configuration for production deployment"
          },
          {
            "name": "Performance Monitoring Dashboard",
            "filename": "monitor-dashboard.js",
            "content": "#!/usr/bin/env node\nconst express = require('express');\nconst Redis = require('ioredis');\nconst os = require('os');\n\nconst app = express();\nconst redis = new Redis(process.env.REDIS_URL);\n\n// Performance metrics endpoint\napp.get('/metrics', async (req, res) => {\n  const metrics = {\n    timestamp: new Date().toISOString(),\n    system: {\n      uptime: os.uptime(),\n      loadavg: os.loadavg(),\n      memory: {\n        total: os.totalmem(),\n        free: os.freemem(),\n        used: os.totalmem() - os.freemem()\n      },\n      cpu: os.cpus().length\n    },\n    redis: {\n      connected: redis.status === 'ready',\n      memory: await redis.memory('usage').catch(() => 'unknown'),\n      keyspace: await redis.info('keyspace').catch(() => 'unknown')\n    },\n    application: {\n      activeConnections: global.activeConnections || 0,\n      requestsPerMinute: global.requestsPerMinute || 0,\n      averageResponseTime: global.averageResponseTime || 0\n    }\n  };\n  \n  res.json(metrics);\n});\n\napp.listen(3001, () => {\n  console.log('üìä Performance monitoring dashboard running on port 3001');\n});",
            "description": "Real-time performance monitoring and metrics collection"
          }
        ],
        "codeExamples": [
          {
            "title": "Production Deployment Commands",
            "language": "bash",
            "code": "# Install PM2 globally\nnpm install -g pm2\n\n# Deploy with PM2 ecosystem config\npm2 start ecosystem.config.js\n\n# Monitor processes\npm2 monit\n\n# View logs\npm2 logs\n\n# Restart all processes\npm2 restart all\n\n# Save PM2 configuration\npm2 save\npm2 startup"
          },
          {
            "title": "Performance Optimization",
            "language": "bash",
            "code": "# Enable production optimizations\nexport NODE_ENV=production\n\n# Start monitoring dashboard\nnode monitor-dashboard.js &\n\n# Run performance benchmarks\nnpm run benchmark\n\n# Monitor system resources\ntop -p $(pgrep -f myMCP)\n\n# Test load capacity\nnpm run load-test\n\n# Analyze performance metrics\ncurl http://localhost:3001/metrics | jq"
          }
        ]
      },
      "execution": {
        "type": "hybrid",
        "launcher": {
          "type": "certification",
          "requirements": [
            "Configure production-grade process management with PM2",
            "Implement comprehensive logging and error tracking",
            "Set up performance monitoring and alerting systems",
            "Optimize system configuration for high availability",
            "Establish security hardening and access controls",
            "Validate system performance under production load conditions",
            "Document operational procedures and troubleshooting guides"
          ],
          "description": "Achieve operational excellence worthy of a five-star luxury resort certification"
        },
        "validation": {
          "type": "criteria",
          "criteria": [
            "All services run reliably under PM2 process management",
            "Comprehensive logging captures all critical system events",
            "Performance monitoring provides real-time insights and alerting",
            "System maintains target response times under expected load",
            "Security configurations meet production hardening standards",
            "Disaster recovery procedures are documented and tested",
            "Operational runbooks are complete and validated"
          ]
        },
        "hints": [
          "Use PM2 cluster mode for the engine to leverage multiple CPU cores",
          "Implement log rotation to prevent disk space issues",
          "Set up Redis persistence and backup strategies for production",
          "Consider implementing rate limiting and DDoS protection",
          "Monitor key business metrics alongside technical metrics"
        ]
      },
      "progress": {
        "attempts": 0,
        "notes": [],
        "artifacts": []
      },
      "narrative": {
        "intro": "The ultimate test of Cloudpeak Resort Lodge approaches - the certification for five-star luxury status. This isn't just about functionality; it's about achieving operational excellence that ensures every guest experience is flawless, every system is optimized, and every contingency is prepared for.",
        "completion": "Magnificent achievement! Cloudpeak Resort Lodge has earned its five-star luxury certification. Your myMCP installation represents the pinnacle of technical excellence - optimized, monitored, secured, and ready to deliver world-class digital experiences. You are now a certified Digital Innkeeper of the highest caliber.",
        "failure_guidance": "The certification review revealed areas requiring improvement. Focus on the specific requirements that weren't met, implement the necessary optimizations, and approach the certification process again with enhanced preparation."
      }
    }
  ],
  "completionCriteria": {
    "minimumScore": 500,
    "requiredSteps": 6,
    "expertiseLevel": "Advanced myMCP Installation Specialist",
    "certification": "Digital Lodge Operations Master",
    "unlocks": [
      "Advanced quest development capabilities",
      "Production deployment expertise", 
      "System architecture mastery",
      "Multi-modal integration proficiency"
    ]
  },
  "systemValidation": {
    "objectModelCompliance": {
      "enhancedQuestStepStructure": "‚úÖ All steps use complete EnhancedQuestStep interface",
      "metadataRichness": "‚úÖ Full metadata with difficulty, category, tags, points, duration",
      "resourceComprehension": "‚úÖ Documentation, tools, templates, and code examples provided",
      "executionContext": "‚úÖ Guided, automated, and hybrid execution types utilized",
      "progressTracking": "‚úÖ Attempts, notes, and artifacts tracking implemented",
      "validationCriteria": "‚úÖ Multiple validation types: file-exists, test, criteria, checklist"
    },
    "foundationEngineIntegration": {
      "redisMultiplayer": "‚úÖ Redis configuration and multiplayer state management",
      "apiIntegration": "‚úÖ Engine API connectivity and validation",
      "stateManagement": "‚úÖ Game state persistence and synchronization",
      "errorHandling": "‚úÖ Graceful degradation and recovery procedures"
    },
    "modalLayerCoverage": {
      "cli": "‚úÖ Command-line interface integration and testing",
      "mcpServer": "‚úÖ MCP protocol implementation and deployment",
      "webInterface": "‚úÖ HTTP API and web-based interactions", 
      "adminDashboard": "‚úÖ Monitoring and system administration",
      "slackIntegration": "‚úÖ Multi-platform communication bridging"
    }
  }
}