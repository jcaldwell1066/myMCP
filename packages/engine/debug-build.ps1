# Debug Build Script

Write-Host "üîç Debugging TypeScript Build Issues" -ForegroundColor Yellow
Write-Host "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ" -ForegroundColor Gray

# Check current directory
Write-Host "üìÅ Current Directory:" -ForegroundColor Cyan
Get-Location

# Check if TypeScript is installed
Write-Host "`nüîß Checking TypeScript installation:" -ForegroundColor Cyan
try {
    $tsVersion = npx tsc --version
    Write-Host "‚úÖ TypeScript: $tsVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå TypeScript not found" -ForegroundColor Red
    exit 1
}

# Check if node_modules exists
Write-Host "`nüì¶ Checking node_modules:" -ForegroundColor Cyan
if (Test-Path "node_modules") {
    Write-Host "‚úÖ node_modules directory exists" -ForegroundColor Green
} else {
    Write-Host "‚ùå node_modules directory not found" -ForegroundColor Red
    Write-Host "Running npm install..." -ForegroundColor Yellow
    npm install
}

# Check tsconfig.json
Write-Host "`n‚öôÔ∏è  Checking tsconfig.json:" -ForegroundColor Cyan
if (Test-Path "tsconfig.json") {
    Write-Host "‚úÖ tsconfig.json found" -ForegroundColor Green
} else {
    Write-Host "‚ùå tsconfig.json not found" -ForegroundColor Red
    exit 1
}

# Check source files
Write-Host "`nüìÑ Checking source files:" -ForegroundColor Cyan
$srcFiles = Get-ChildItem -Path "src" -Recurse -Filter "*.ts" | Measure-Object
Write-Host "‚úÖ Found $($srcFiles.Count) TypeScript files" -ForegroundColor Green

# Try TypeScript check without emit
Write-Host "`nüß™ Testing TypeScript compilation (dry run):" -ForegroundColor Cyan
try {
    $result = npx tsc --noEmit 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ TypeScript check passed!" -ForegroundColor Green
    } else {
        Write-Host "‚ùå TypeScript errors found:" -ForegroundColor Red
        Write-Host $result -ForegroundColor Red
        exit 1
    }
} catch {
    Write-Host "‚ùå TypeScript check failed:" -ForegroundColor Red
    Write-Host $_.Exception.Message -ForegroundColor Red
    exit 1
}

# Try actual build
Write-Host "`nüèóÔ∏è  Attempting build:" -ForegroundColor Cyan
try {
    npx tsc
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Build successful!" -ForegroundColor Green
        
        # Check if dist was created
        if (Test-Path "dist") {
            $distFiles = Get-ChildItem -Path "dist" -Recurse | Measure-Object
            Write-Host "‚úÖ Generated $($distFiles.Count) files in dist/" -ForegroundColor Green
        } else {
            Write-Host "‚ùå dist directory not created" -ForegroundColor Red
        }
    } else {
        Write-Host "‚ùå Build failed" -ForegroundColor Red
        exit 1
    }
} catch {
    Write-Host "‚ùå Build error:" -ForegroundColor Red
    Write-Host $_.Exception.Message -ForegroundColor Red
    exit 1
}

Write-Host "`nüéâ All checks passed!" -ForegroundColor Green
